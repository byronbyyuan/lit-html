{"version":3,"file":"parts.js","sources":["src/parts.ts"],"sourcesContent":["import {AttributePart, NodePart, Part, nothing} from './lit-html.js';\n\n/**\n * The state of a NodePart, which can be detached and reattached.\n */\nexport type NodePartState = {};\n\n/**\n * The private interface for NodePartState, which should be kept opaque.\n */\ntype NodePartStateInternal = {\n  _value: unknown;\n  _fragment: DocumentFragment;\n};\n\n/**\n * Package private members of NodePart.\n */\ntype NodePartInternal = {\n  _startNode: NodePart['_startNode'];\n  _endNode: NodePart['_endNode'];\n  _commitNode: NodePart['_commitNode'];\n};\n\nexport const detachNodePart = (part: NodePart): NodePartState => {\n  const fragment = document.createDocumentFragment();\n  const state: NodePartStateInternal = {\n    _value: part._value,\n    _fragment: fragment,\n  };\n  let start = ((part as unknown) as NodePartInternal)._startNode.nextSibling;\n  let nextNode;\n  while (start !== ((part as unknown) as NodePartInternal)._endNode) {\n    nextNode = start!.nextSibling;\n    fragment.append(start!);\n    start = nextNode;\n  }\n  part._value = nothing;\n  return state;\n};\n\nexport const restoreNodePart = (part: NodePart, state: NodePartState) => {\n  ((part as unknown) as NodePartInternal)._commitNode(\n    (state as NodePartStateInternal)._fragment\n  );\n  part._value = (state as NodePartStateInternal)._value;\n};\n\nconst createMarker = () => document.createComment('');\n\nexport const createAndInsertPart = (\n  containerPart: NodePart,\n  refPart?: NodePart\n): NodePart => {\n  const container = ((containerPart as unknown) as NodePartInternal)._startNode\n    .parentNode as Node;\n\n  const refNode =\n    refPart === undefined\n      ? ((containerPart as unknown) as NodePartInternal)._endNode\n      : ((refPart as unknown) as NodePartInternal)._startNode;\n\n  const startNode = container.insertBefore(createMarker(), refNode);\n  const endNode = container.insertBefore(createMarker(), refNode);\n  return new NodePart(startNode, endNode, containerPart.options);\n};\n\nexport const setPartValue = <T extends Part>(\n  part: T,\n  value: unknown,\n  index?: number\n): T => {\n  if ((part as AttributePart).strings !== undefined) {\n    if (index === undefined) {\n      throw new Error(\n        \"An index must be provided to set an AttributePart's value.\"\n      );\n    }\n    const newValues = [...(part._value as Array<unknown>)];\n    newValues[index] = value;\n    (part as AttributePart)._setValue(newValues, 0);\n  } else {\n    part._setValue(value);\n  }\n  return part;\n};\n\nexport const getPartValue = (part: NodePart) => part._value;\n\nexport const insertPartBefore = (\n  containerPart: NodePart,\n  part: NodePart,\n  refPart?: NodePart\n) => {\n  const container = ((containerPart as unknown) as NodePartInternal)._startNode\n    .parentNode!;\n\n  const refNode = refPart\n    ? ((refPart as unknown) as NodePartInternal)._startNode\n    : ((containerPart as unknown) as NodePartInternal)._endNode;\n\n  const endNode = ((part as unknown) as NodePartInternal)._endNode!.nextSibling;\n\n  if (endNode !== refNode) {\n    reparentNodes(\n      container,\n      ((part as unknown) as NodePartInternal)._startNode,\n      endNode,\n      refNode\n    );\n  }\n};\n\nexport const removePart = (part: NodePart) => {\n  removeNodes(\n    ((part as unknown) as NodePartInternal)._startNode,\n    ((part as unknown) as NodePartInternal)._endNode!.nextSibling\n  );\n};\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nconst reparentNodes = (\n  container: Node,\n  start: Node | null,\n  end: Node | null = null,\n  before: Node | null = null\n): void => {\n  while (start !== end) {\n    const n = start!.nextSibling;\n    container.insertBefore(start!, before);\n    start = n;\n  }\n};\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nconst removeNodes = (\n  start: ChildNode | null,\n  end: ChildNode | null = null\n): void => {\n  while (start !== end) {\n    const n = start!.nextSibling;\n    start!.remove();\n    start = n;\n  }\n};\n"],"names":["detachNodePart","part","fragment","document","createDocumentFragment","state","_value","st","nextNode","start","_startNode","nextSibling","_endNode","append","nothing","restoreNodePart","_commitNode","_fragment","createMarker","createComment","createAndInsertPart","containerPart","refPart","container","parentNode","refNode","undefined","startNode","insertBefore","endNode","NodePart","options","setPartValue","value","index","strings","Error","newValues","_setValue","getPartValue","insertPartBefore","reparentNodes","removePart","removeNodes","end","before","n","remove"],"mappings":"4DAwBaA,EAAkBC,IAC7B,MAAMC,EAAWC,SAASC,yBACpBC,EAA+B,CACnCC,OAAQL,EAAKK,OACbC,GAAWL,GAEb,IACIM,EADAC,EAAUR,EAAsCS,EAAWC,YAE/D,KAAOF,IAAYR,EAAsCW,GACvDJ,EAAWC,EAAOE,YAClBT,EAASW,OAAOJ,GAChBA,EAAQD,EAGV,OADAP,EAAKK,OAASQ,EACPT,GAGIU,EAAkB,CAACd,EAAgBI,KAC5CJ,EAAsCe,EACrCX,EAAgCY,IAEnChB,EAAKK,OAAUD,EAAgCC,QAG3CY,EAAe,IAAMf,SAASgB,cAAc,IAErCC,EAAsB,CACjCC,EACAC,KAEA,MAAMC,EAAcF,EAA+CX,EAChEc,WAEGC,OACQC,IAAZJ,EACMD,EAA+CT,EAC/CU,EAAyCZ,EAE3CiB,EAAYJ,EAAUK,aAAaV,IAAgBO,GACnDI,EAAUN,EAAUK,aAAaV,IAAgBO,GACvD,OAAO,IAAIK,EAASH,EAAWE,EAASR,EAAcU,UAG3CC,EAAe,CAC1B/B,EACAgC,EACAC,KAEA,QAAwCR,IAAnCzB,EAAuBkC,QAAuB,CACjD,QAAcT,IAAVQ,EACF,MAAUE,MACR,8DAGJ,MAAMC,EAAY,IAAKpC,EAAKK,QAC5B+B,EAAUH,GAASD,EAClBhC,EAAuBqC,UAAUD,EAAW,QAE7CpC,EAAKqC,UAAUL,GAEjB,OAAOhC,GAGIsC,EAAgBtC,GAAmBA,EAAKK,OAExCkC,EAAmB,CAC9BnB,EACApB,EACAqB,KAEA,MAAMC,EAAcF,EAA+CX,EAChEc,WAEGC,EAAUH,EACVA,EAAyCZ,EACzCW,EAA+CT,EAE/CiB,EAAY5B,EAAsCW,EAAUD,YAE9DkB,IAAYJ,GACdgB,EACElB,EACEtB,EAAsCS,EACxCmB,EACAJ,IAKOiB,EAAczC,IACzB0C,EACI1C,EAAsCS,EACtCT,EAAsCW,EAAUD,cAShD8B,EAAgB,CACpBlB,EACAd,EACAmC,EAAmB,KACnBC,EAAsB,QAEtB,KAAOpC,IAAUmC,GAAK,CACpB,MAAME,EAAIrC,EAAOE,YACjBY,EAAUK,aAAanB,EAAQoC,GAC/BpC,EAAQqC,IAQNH,EAAc,CAClBlC,EACAmC,EAAwB,QAExB,KAAOnC,IAAUmC,GAAK,CACpB,MAAME,EAAIrC,EAAOE,YACjBF,EAAOsC,SACPtC,EAAQqC"}